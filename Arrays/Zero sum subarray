
*** To find Subarrays sum equals to 0 from given array***
*** Time complexity : O(N*N)
*** Space complexity : 0(1)


#include<iostream>
#include<vector>
using namespace std;
int main()
{
    vector<int>v={6,4,-5,1,8,3,2,-10,-4,0,4,-9};
    vector<int>v1;
    int total=0,sum=0,min=0;

    for(int i=0;i<v.size();i++){
     for(int j=i;j<v.size();j++){
      v1.push_back(v[j]);
      sum=sum+v[j];
      if(sum==0){
        total++;
        if(v1.size()<min)
        min=v1.size();
        if(min==0)
        min=v1.size(); 
        for(int k=0;k<v1.size();k++)
         cout<<v1[k]<<" ";
        cout<<endl;
      }
     }
    v1.clear();
    sum=0;
    }
    cout<<"total : "<<total<<endl<<"min : "<<min;
}




*** alternate ***

*** Time complexity : O(N)
*** Space complexity : 0(N)


#include<iostream>
#include<vector>
#include<bits/stdc++.h>
using namespace std;
int main()
{
    vector<int>v={6,-1,-3,4,-2,2,4,6,-12,-7};
    unordered_map<int,int>m;
    int total=0,sum=0;

    for(int i=0;i<v.size();i++){
      sum=sum+v[i];
     if(sum==0)
      total++;
     if(m[sum]>0){
      total=total+m[sum];
      m[sum]++;
     }
     else
      m[sum]=1;
    }
    cout<<total;
}


