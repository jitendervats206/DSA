
*** balance an unbalanced BST ***
*** Time complexity : O(N)
*** Space complexity : O(1)

#include<iostream>
#include<vector>
#include<queue>
using namespace std;
class node{
  public:
   int data;
   node *left,*right;
   node(int x){
    data=x;
    left=right=NULL;
   }
};

void inorder(node*&root,vector<int>&v){
    if(root==NULL)
     return;

    inorder(root->left,v);
    v.push_back(root->data);
    inorder(root->right,v);
}

node* balancebst(int l,int r,vector<int>&v){
    if(l>r)
     return NULL;

    int mid=(l+r)/2;
    node*root=new node(v[mid]);
    root->left=balancebst(l,mid-1,v);
    root->right=balancebst(mid+1,r,v);
    return root;
}

void level(queue<node*>q){
    if(q.empty())
     return ;

    cout<<q.front()->data<<" ";
    if(q.front()->left)
     q.push(q.front()->left);
    if(q.front()->right)
     q.push(q.front()->right);
    q.pop();
    level(q);
}

int main()
{
    node*root=new node(1);
    root->right=new node(2);
    root->right->right=new node(3);
    root->right->right->right=new node(4);
    root->right->right->right->right=new node(5);
    root->right->right->right->right->right=new node(6);
    root->right->right->right->right->right->right=new node(7);
    queue<node*>q;
    vector<int>v;
    q.push(root);
    cout<<"unbalanced bst : ";
    level(q);
    inorder(root,v);
    node*root1;
    root1=balancebst(0,v.size()-1,v);
    q.pop();
    q.push(root1);
    cout<<endl<<"balanced bst : ";
    level(q);

}

