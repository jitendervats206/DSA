
*** find common nodes in bst ***
*** Time complexity : O(N)
*** Space complexity : O(N)


#include<iostream>
#include<bits/stdc++.h>
using namespace std;
class node{
  public:
   int data;
   node *left,*right;
   node(int x){
    data=x;
    left=right=NULL;
   }
};

void level(queue<node*>q){
    if(q.empty())
     return ;

    cout<<q.front()->data<<" ";
    if(q.front()->left)
     q.push(q.front()->left);
    if(q.front()->right)
     q.push(q.front()->right);
    q.pop();
    level(q);
}

int main()
{
    node*root1=NULL;
    queue<node*>q;
    root1=new node(5);
    root1->left=new node(1);
    root1->left->left=new node(0);
    root1->left->right=new node(4);
    root1->right=new node(10);
    root1->right->left=new node(7);
    root1->right->left->right=new node(9);
    q.push(root1);
    cout<<"bst 1 : "; 
    level(q);
    q.pop();

    node* root2=NULL;
    root2=new node(10);
    root2->right=new node(20);
    root2->left=new node(7);
    root2->left->right=new node(9);
    root2->left->left=new node(4);
    q.push(root2);
    cout<<endl<<"bst 2 : ";
    level(q);
    cout<<endl;
    stack<node*>s1,s2;
   
    while(root1){
      s1.push(root1);
      root1=root1->left;
    }
    while(root2){
      s2.push(root2);
      root2=root2->left;
    }

    while(!s1.empty() and !s2.empty()){
      if(s1.top()->data==s2.top()->data){
        cout<<s1.top()->data<<" ";
        node*temp=s1.top()->right;
        s1.pop();
        while(temp){
         s1.push(temp);
         temp=temp->left;
        }
        temp=s2.top()->right;
        s2.pop();   
        while(temp){
         s2.push(temp);
         temp=temp->left; 
        }
      }
      else{
        if(s1.top()->data<s2.top()->data){
         node*temp=s1.top()->right;
         s1.pop();
         while(temp){
          s1.push(temp);
          temp=temp->left;
         }
        }
        else if(s2.top()->data<s1.top()->data){
         node*temp=s2.top()->right;
         s2.pop();
         while(temp){
          s2.push(temp);
          temp=temp->left; 
         }
        }
      }
    }
}
