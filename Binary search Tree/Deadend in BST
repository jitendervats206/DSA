
*** check for deadend present in BST ***
*** Time complexity : O(N)
*** Space complexity : O(N)


#include<iostream>
#include<climits>
#include<queue>
using namespace std;
class node{
  public:
   int data;
   node *left,*right;
};

node* bst(node *&root,int val){
    if(root==NULL){
        node*temp=new node;
        temp->data=val;
        temp->left=NULL;
        temp->right=NULL;
        return temp;
    }
    if(val<root->data)
       root->left=bst(root->left,val);
    else
      root->right=bst(root->right,val);
    return root;
}

int deadend(node*&root,int &left,int &right){
    if(root==NULL)
     return 0; 
  
    int l=deadend(root->left,left,root->data);
    int m=deadend(root->right,root->data,right);

    if(!root->left and !root->right) 
     if(right-root->data<=1 and root->data-left<=1)
      return 1;

    if(l==1 or m==1)
     return 1;
    else
     return 0;

}

void level(queue<node*>q){
    if(q.empty())
     return;

    cout<<q.front()->data<<" ";
    if(q.front()->left)
     q.push(q.front()->left);
    if(q.front()->right)
     q.push(q.front()->right);
    q.pop();
    level(q);
}

int main()
{
    int arr[]={20,15,22,10,18,21,26};
    node*root=NULL;
    queue<node*>q;
    for(int i=0;i<sizeof(arr)/4;i++)
     root=bst(root,arr[i]);
    q.push(root);
    cout<<"bst : ";
    level(q);
    int left=INT_MIN,right=INT_MAX;
    cout<<endl;
    cout<<deadend(root,left,right);

}
