
*** find target node in BST ***
*** Time complexity : O(N)
*** Space complexity : O(N)


#include<iostream>
#include<queue>
using namespace std;
class node{
  public:
   int data;
   node *left,*right;

};

node* bst(node *&root,int val){
    if(root==NULL){
        node*temp=new node;
        temp->data=val;
        temp->left=NULL;
        temp->right=NULL;
        return temp;
    }

    if(val<root->data)
       root->left=bst(root->left,val);
    else
      root->right=bst(root->right,val);
    return root;
}

void level(queue<node*>q){
    if(q.empty())
     return;

    cout<<q.front()->data<<" ";
    if(q.front()->left)
     q.push(q.front()->left);
    if(q.front()->right)
     q.push(q.front()->right);
    q.pop();
    level(q);
}
 
bool target(node*root,int t){
    while(root){
         if(root->data==x)
          return 1;
         if(x<root->data and root->left)
         root=root->left;
         else if(x>root->data and root->right)
          root=root->right;
        else
          return 0;
    }
    return 0;
}


int main()
{
    int arr[]={2,4,5,9};
    node*root=NULL;
    queue<node*>q;
    for(int i=0;i<sizeof(arr)/4;i++)
     root=bst(root,arr[i]);
    q.push(root);
    level(q); 
    int t;
    cout<<endl<<"enter target : ";
    cin>>t;
    cout<<target(root,t);

}
