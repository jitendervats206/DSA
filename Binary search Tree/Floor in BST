
*** find biggest smaller number ***
*** Time complexity : O(N)
*** Space complexity : O(N)


#include<iostream>
#include<bits/stdc++.h>
using namespace std;
class node{
  public:
   int data;
   node *left,*right;
};

node* bst(node *&root,int val){
    if(root==NULL){
        node*temp=new node;
        temp->data=val;
        temp->left=NULL;
        temp->right=NULL;
        return temp;
    }
    if(val<root->data)
       root->left=bst(root->left,val);
    else
      root->right=bst(root->right,val);
    return root;
}

void level(queue<node*>q){
    if(q.empty())
     return ;

    cout<<q.front()->data<<" ";
    if(q.front()->left)
     q.push(q.front()->left);
    if(q.front()->right)
     q.push(q.front()->right);
    q.pop();
    level(q);
}

void floor(node *root,int key,int &a){
    if(root==NULL)
     return ;

    floor(root->left,key,a);
    if(root->data<=key and a!=-1)  
     a=root->data;
    else if(a==-1 and root->data<=key)
     a=root->data;
    floor(root->right,key,a);
}


int main()
{
    int arr[]={10,5,13,9,8,15,18,1};
    node*root=NULL;
    for(int i=0;i<sizeof(arr)/4;i++)
      root=bst(root,arr[i]);
    queue<node*>q;
    q.push(root);
    cout<<"bst : "; 
    level(q);
    int key=5,a=-1;
    cout<<endl;
    floor(root,key,a);
    cout<<a;

}
