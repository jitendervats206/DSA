
*** find LCA in BST ***
*** Time complexity : O(N)
*** Space complexity : O(N)


#include<iostream>
#include<queue>
using namespace std;
class node{
  public:
   int data;
   node *left,*right;
};

node* bst(node *&root,int val){
    if(root==NULL){
        node*temp=new node;
        temp->data=val;
        temp->left=NULL;
        temp->right=NULL;
        return temp;
    }
    if(val<root->data)
       root->left=bst(root->left,val);
    else
      root->right=bst(root->right,val);
    return root;
}

node* lca(node*root,int n1,int n2){
    if(root==NULL)
     return NULL;
    
    if((n1<root->data and n2>root->data) or (n1>root->data and n2<root->data) or root->data==n1 or root->data==n2)
     return root;
    
    node*a=NULL,*b=NULL;
    if(n1<root->data and n2<root->data)
     a=lca(root->left,n1,n2);
    if(!a)
     b=lca(root->right,n1,n2);
    if(!b)
     return a;
    else
     return b;

}

void level(queue<node*>q){
    if(q.empty())
     return;

    cout<<q.front()->data<<" ";
    if(q.front()->left)
     q.push(q.front()->left);
    if(q.front()->right)
     q.push(q.front()->right);
    q.pop();
    level(q);
}

int main()
{
    int arr[]={20,30,10,14,25,35,2,1,3,11,15};
    node*root=NULL;
    queue<node*>q;
    for(int i=0;i<sizeof(arr)/4;i++)
     root=bst(root,arr[i]);
    q.push(root);
    cout<<"bst : ";
    level(q);
    cout<<endl<<"lca is : "; 
    cout<<lca(root,3,15)->data;
}

