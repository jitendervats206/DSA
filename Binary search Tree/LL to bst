

*** make  BST from sorted LL***
*** Time complexity : O(N)
*** Space complexity : O(N)

#include<iostream>
#include<queue>
using namespace std;
class node{
  public:
   int data;
   node *left,*right;
};

node*bst(vector<int>&v,int start,int end){
    int mid=start+(end-start)/2;
    if(start>end)
     return NULL;

    node*root=new node();
    root->data=v[mid];
    root->left=root->right=NULL;
    root->left=bst(v,start,mid-1);
    root->right=bst(v,mid+1,end);
    return root;    
}

void level(queue<node*>q){
    if(q.empty())
     return;

    cout<<q.front()->data<<" ";
    if(q.front()->left)
     q.push(q.front()->left);
    if(q.front()->right)
     q.push(q.front()->right);
    q.pop();
    level(q);
}

int main()
{
    vector<int>v={1,2,3,4,5,6,7};
    queue<node*>q;
    int start=0,end=v.size()-1;
    node*root=NULL;
    root=bst(v,start,end);
    q.push(root);
    cout<<"bst : ";
    level(q);
}
