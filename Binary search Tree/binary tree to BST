

*** make  BST from tree***
*** Time complexity : O(N)
*** Space complexity : O(N)



#include<iostream>
#include<vector>
#include<bits/stdc++.h>
using namespace std;
class node{
  public:
   int data;
   node *left,*right;
   node(int x){
    data=x;
    left=right=NULL;
   }
};

void level(queue<node*>q){
    if(q.empty())
     return ;

    cout<<q.front()->data<<" ";
    if(q.front()->left)
     q.push(q.front()->left);
    if(q.front()->right)
     q.push(q.front()->right);
    q.pop();
    level(q);
}

void inorder(node*root,vector<int>&v){
    if(root==NULL)
     return;

    inorder(root->left,v);
    v.push_back(root->data);
    inorder(root->right,v);

}

void make(node* &root,vector<int>&v,int &index){
    if(root==NULL)
     return;

    make(root->left,v,index);
    root->data=v[index++];
    make(root->right,v,index);
}

int main()
{
    node*root=NULL;
    queue<node*>q;
    root=new node(3);
    root->left=new node(2);
    root->left->left=new node(4);
    root->right=new node(1);

    q.push(root);
    cout<<"tree : ";
    level(q); 
    vector<int>v;
    inorder(root,v);
    sort(v.begin(),v.end());
    int index=0;
    make(root,v,index);
    q.pop();
    q.push(root);
    cout<<endl<<"bst : ";
    level(q);

  
   
}
