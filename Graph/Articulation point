
*** To find articulation point ***
*** Time complexity : O(N)
*** Space complexity : 0(NLogN)


#include<iostream>
#include<vector>
#include<queue>
using namespace std;
void dfs(int node,int parent,int count,vector<int>&mx,vector<int>&mn,vector<int>&visited,vector<int> adj[]){
    mx[node]=mn[node]=count;
    visited[node]=1;
    int child=0;
   
    for(int i=0;i<adj[node].size();i++){
      if(adj[node][i]==parent)
       continue;
      else if(visited[adj[node][i]])
       mn[node]=min(mx[adj[node][i]],mn[node]);
      else{
        count++;
        child++;
        dfs(adj[node][i],node,count,mx,mn,visited,adj);
        mn[node]=min(mn[adj[node][i]],mn[node]);
        if(mx[node]<=mn[adj[node][i]] and parent!=-1)
         cout<<node<<",";
      }
    }

    if(child>1 and parent==-1)
     cout<<node;
}

int main()
{ 
    int nodes=11;
    vector<int>mx(nodes),mn(nodes),visited(nodes,0);
    vector<int>adj[nodes];
    vector<vector<int>>v={{1,4},{0,2,3},{1,5},{1,4},{3,0},{2,7,6},{5,7},{5,6,8},{10,7,9},{8,10},{9,8}};
    
    for(int i=0;i<v.size();i++)
      for(int j=0;j<v[i].size();j++)
       adj[i].push_back(v[i][j]);

    for(int i=0;i<v.size();i++){
      cout<<i<<"->";
      for(int j=0;j<v[i].size();j++)
       cout<<adj[i][j]<<" ";
      cout<<endl;
    }
    dfs(0,-1,0,mx,mn,visited,adj);
}

