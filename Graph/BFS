
*** Impliment BFS approach in graph ***
*** Time complexity : O(N)
*** Space complexity : 0(NLogN)




#include<iostream>
#include<vector>
#include<queue>
using namespace std;
int main()
{
    int nodes=9;
    vector<int>visited(nodes,0);
    queue<int>q;
    vector<int>adj[nodes];
    vector<vector<int>>v={{1,2},{0,5,7},{0,3,4},{2},{2},{1,6},{5,8},{1,8},{6,7}};

    for(int i=0;i<v.size();i++)
       for(int j=0;j<v[i].size();j++)
        adj[i].push_back(v[i][j]);
 
    cout<<"adj list :"<<endl;
    for(int i=0;i<(sizeof(adj)/4)/(sizeof(adj[0])/4);i++){
      cout<<i<<"->";
      for(int j=0;j<adj[i].size();j++)
       cout<<adj[i][j]<<" ";
      cout<<endl;
    }

    q.push(0);
    visited[0]=1;
    cout<<"BFS : ";
    while(!q.empty()){
      int x=q.front();
      q.pop();
      cout<<x<<" ";
      for(int j=0;j<adj[x].size();j++)
        if(!visited[adj[x][j]]){
         visited[adj[x][j]]=1;  
         q.push(adj[x][j]);
        }
    }

}
