
*** To check bipartite graph***
*** Time complexity : O(N)
*** Space complexity : 0(NLogN)



#include<iostream>
#include<vector>
#include<queue>
using namespace std;
int main()
{
    int nodes=9;
    vector<int>visited(nodes,0),color(nodes,-1);
    queue<int>q1,q2;
    bool flag=false;
    vector<int>adj[nodes];
    vector<vector<int>>v={{1},{0,2},{3,7},{2,4},{3,5},{8,4},{5,7},{2,6},{5}};

    for(int i=0;i<v.size();i++)
       for(int j=0;j<v[i].size();j++)
        adj[i].push_back(v[i][j]);
 
    cout<<"adj list :"<<endl;
    for(int i=0;i<(sizeof(adj)/4)/(sizeof(adj[0])/4);i++){
      cout<<i<<"->";
      for(int j=0;j<adj[i].size();j++)
       cout<<adj[i][j]<<" ";
      cout<<endl;
    }
    
    int x=1;
    for(int i=0;i<nodes;i++){
        if(visited[i]==0){
         x=!x;
         if(x==0)
          q1.push(i);
         else
          q2.push(i);
         visited[i]=1;
         color[i]=x;
        }

        x=!x;
        for(int j=0;j<adj[i].size();j++)
         if(visited[adj[i][j]]==0){
           for(int k=0;k<adj[adj[i][j]].size();k++)
           if(color[ adj[adj[i][j]] [k] ]==x){
           flag=true;
           break;}
           
         if(x==0)
          q1.push(adj[i][j]);
         else
          q2.push(adj[i][j]);

         visited[adj[i][j]]=1;
         color[adj[i][j]]=x;
         }
    }

    if(flag==false){
     cout<<"red : ";
     while(!q1.empty()){
        cout<<q1.front()<<" ";
        q1.pop();
     }
     cout<<endl<<"blue : ";
     while(!q2.empty()){
        cout<<q2.front()<<" ";
        q2.pop();
     }
    }
    else
     cout<<"not possible";
    
}
