
*** To find time to spread corona ***
*** Time complexity : O(N)
*** Space complexity : 0(NLogN)



#include<iostream>
#include<vector>
#include<queue>
using namespace std;
int main()
{ 
  vector<vector<int>>v(5,vector<int>(6));
  queue<pair<int,int>>q;
  int count=0;
  v[0]={1,2,1,1,0,1};
  v[1]={1,1,0,1,1,2};
  v[2]={0,1,0,2,1,1};
  v[3]={1,1,0,1,0,1};
  v[4]={1,0,1,2,0,1};
 
  for(int i=0;i<v.size();i++){
   for(int j=0;j<v[i].size();j++){
    cout<<v[i][j]<<" ";
    if(v[i][j]==2)
     q.push({i,j});
   }
   cout<<endl;
  }

  q.push({-1,-1});  
  while(!q.empty()){
   int x=q.front().first;
   int y=q.front().second;
   q.pop();
   
   if(x==-1 and y==-1 and q.size()==0)
    break;
   else if(x==-1 and y==-1 and q.size()>0){
    count++;
    q.push({-1,-1});
   }
   
   else{
    x--;
    if(x>-1 and v[x][y]==1){
     v[x][y]++;
     q.push({x,y});
    }
    x++; x++;
    if(x<v.size() and v[x][y]==1){
     v[x][y]++;
     q.push({x,y});
    }
    x--; y--;
    if(y>-1 and v[x][y]==1){
     v[x][y]++;
     q.push({x,y});
    }
    y++; y++;
    if(y<v[0].size() and v[x][y]==1){
     v[x][y]++;
     q.push({x,y});
    }
   }
  }
  cout<<"time : "<<count;
}
