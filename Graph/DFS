
*** DFS approach in graph ***
*** Time complexity : O(N)
*** Space complexity : 0(NLogN)



#include<iostream>
#include<vector>
#include<queue>
using namespace std;
void dfs(vector<int> adj[],vector<int>&visited,int k){
    visited[k]=1;
    cout<<k<<" ";
    for(int j=0;j<adj[k].size();j++)
      if(!visited[adj[k][j]])
        dfs(adj,visited,adj[k][j]);
}

int main()
{
    int nodes=9;
    vector<int>visited(nodes,0);
    queue<int>q;
    vector<int>adj[nodes];
    vector<vector<int>>v={{1,3,2},{0,7,4},{0,5},{0},{1,5},{4,6,2},{5},{1}};

    for(int i=0;i<v.size();i++)
       for(int j=0;j<v[i].size();j++)
        adj[i].push_back(v[i][j]);
 
    cout<<"adj list :"<<endl;
    for(int i=0;i<(sizeof(adj)/4)/(sizeof(adj[0])/4);i++){
      cout<<i<<"->";
      for(int j=0;j<adj[i].size();j++)
       cout<<adj[i][j]<<" ";
      cout<<endl;
    }

    dfs(adj,visited,0);

}
