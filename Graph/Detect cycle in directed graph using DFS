
*** To find loop in directed graph in DFS ***
*** Time complexity : O(N)
*** Space complexity : 0(NlogN)


#include<iostream>
#include<vector>
#include<queue>
using namespace std;
bool dfs(vector<int> adj[],vector<int>&visited,vector<int>path,int k){
    path[k]=1;
    visited[k]=1;

    for(int j=0;j<adj[k].size();j++){
        if(path[adj[k][j]]==1)
         return 1;
        else if(visited[adj[k][j]]==1)
         continue;  // return 0;
        
      return dfs(adj,visited,path,adj[k][j]);
    }
    path[k]=0;
    return 0;
}

int main()
{
    int nodes=9;
    vector<int>visited(nodes,0),path(nodes,0);
    queue<int>q;
    vector<int>adj[nodes];
    vector<vector<int>>v={{1},{2},{3,5,7},{4},{5,6},{2,4},{},{8},{}};

    for(int i=0;i<v.size();i++)
       for(int j=0;j<v[i].size();j++)
        adj[i].push_back(v[i][j]);
 
    cout<<"adj list :"<<endl;
    for(int i=0;i<(sizeof(adj)/4)/(sizeof(adj[0])/4);i++){
      cout<<i<<"->";
      for(int j=0;j<adj[i].size();j++)
       cout<<adj[i][j]<<" ";
      cout<<endl;
    }
    cout<<dfs(adj,visited,path,0);
   
}
