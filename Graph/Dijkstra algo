
*** impliment dijkstra algo with parent and path ***
*** Time complexity : O(N)
*** Space complexity : 0(NLogN)



#include<iostream>
#include<vector>
#include<climits>
#include<queue>
using namespace std; 
int main()
{ 
    int nodes=6;
    vector<int>path(nodes,INT_MAX),visited(nodes,0),parent(nodes,-1);
    vector<pair<int,int>>adj[nodes];
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>mn;
    vector<vector<pair<int,int>>>v= {{{1,6},{2,2}},{{0,6},{3,7},{2,3}},{{0,2},{1,3},{4,4}},{{1,7},{4,5},{5,2}},{{2,4},{3,5},{5,9}},{{4,9},{3,2}}};
    
    for(int i=0;i<v.size();i++)
       for(int j=0;j<v[i].size();j++)
        adj[i].push_back({v[i][j].first,v[i][j].second});
 
    cout<<"adj list :"<<endl;
    for(int i=0;i<(sizeof(adj)/4)/(sizeof(adj[0])/4);i++){
      cout<<i<<"->";
      for(int j=0;j<adj[i].size();j++)
       cout<<"("<<adj[i][j].first<<","<<adj[i][j].second<<") ";
      cout<<endl;
    }

    mn.push({0,0});
    path[0]=0;
    cout<<"order : ";
    while(!mn.empty()){
      int y=mn.top().second;
      mn.pop();
      if(visited[y]==1)
       continue;
      for(int i=0;i<adj[y].size();i++)
        if(path[adj[y][i].first]>(path[y]+adj[y][i].second) and !visited[adj[y][i].first]){
          parent[adj[y][i].first]=y;
          path[adj[y][i].first]=(path[y]+adj[y][i].second);
          mn.push({path[adj[y][i].first],adj[y][i].first});
        }
       visited[y]=1;
       cout<<y<<" ";  
    }

    cout<<endl<<"path : ";
    for(int i=0;i<path.size();i++)
     cout<<path[i]<<" ";
    cout<<endl<<"parent : ";
    for(int i=0;i<parent.size();i++)
     cout<<parent[i]<<" ";
     
}


