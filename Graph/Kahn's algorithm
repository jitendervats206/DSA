

*** To find topological dort using BFS ***
*** Time complexity : O(N)
*** Space complexity : 0(NLogN)


#include<iostream>
#include<vector>
#include<queue>
using namespace std;
int main()
{
    int nodes=7,k=0;
    vector<int>indeg(nodes,0);
    queue<int>q;
    vector<int>adj[nodes];
    vector<vector<int>>v={{1,2},{3,4},{},{4},{},{6,4},{3}};

    for(int i=0;i<v.size();i++)
       for(int j=0;j<v[i].size();j++)
        adj[i].push_back(v[i][j]);
 
    cout<<"adj list :"<<endl;
    for(int i=0;i<(sizeof(adj)/4)/(sizeof(adj[0])/4);i++){
      cout<<i<<"->";
      for(int j=0;j<adj[i].size();j++){
       cout<<adj[i][j]<<" ";
       indeg[adj[i][j]]++;
      }
      cout<<endl;
    }

    for(int i=0;i<indeg.size();i++)
     if(indeg[i]==0)
      q.push(i);

    while(!q.empty()){
       int a=q.front();
       cout<<a<<" ";
       q.pop();

       for(int i=0;i<adj[a].size();i++){
        indeg[adj[a][i]]--;
        if(indeg[adj[a][i]]==0)
         q.push(adj[a][i]);
       }     
    }
    cout<<endl; 

}


