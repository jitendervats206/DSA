
*** To impliment kruskal algo ***
*** Time complexity : O(N)
*** Space complexity : 0(NLogN)


#include<iostream>
#include<vector>
#include<queue>
using namespace std;
int findparent(int u,vector<int> &parent){  
    if(u==parent[u])
     return u;
    return parent[u]=findparent(parent[u],parent);
}

void hieght(int u,int v,vector<int>&rank,vector<int>&parent){
    int pu=findparent(u,parent);
    int pv=findparent(v,parent);

    if(rank[pu]<rank[pv])
     parent[pu]=pv;
    else if(rank[pu]>rank[pv])
     parent[pv]=pu;
    else{
        parent[pv]=pu;
        rank[pu]++;
    }
}

int main()
{ 
    int nodes=9,wieght=0,edges=0;
    vector<int>rank(nodes,0),parent(nodes,0);
    vector<pair<int,int>>adj[nodes];
    priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>>mn;
    vector<vector<pair<int,int>>>v= {{{1,4},{7,8}},{{7,11},{2,8},{0,4}},{{1,8},{8,2},{3,7}},{{4,9},{2,7},{5,14}},{{3,9},{5,10}},{{3,14},{4,10},{6,2}},{{7,1},{8,6},{5,2}},{{0,8},{1,11},{8,7}},{{7,7},{2,2},{6,6}}};
    
    for(int i=0;i<v.size();i++)
      for(int j=0;j<v[i].size();j++)
       adj[i].push_back(v[i][j]);

    for(int i=0;i<v.size();i++){
      cout<<i<<"->";
      for(int j=0;j<v[i].size();j++)
       cout<<"("<<adj[i][j].first<<","<<adj[i][j].second<<") ";
      cout<<endl;
    }

    for(int i=0;i<parent.size();i++)
     parent[i]=i;

    for(int i=0;i<nodes;i++)
        for(int j=0;j<adj[i].size();j++)
         mn.push({{adj[i][j].second},{i,adj[i][j].first}});

    while(!mn.empty()){
        int u=mn.top().second.first;
        int v=mn.top().second.second;
        int wt=mn.top().first;
        mn.pop();

        if(findparent(u,parent)!=findparent(v,parent)){
            wieght=wieght+wt;
            hieght(u,v,rank,parent);
            edges++;
        }
        if(edges==nodes-1)
         break;

    }
    
    cout<<wieght;    
    
}
