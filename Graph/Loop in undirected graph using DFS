

*** To find loop in graph using DFS***
*** Time complexity : O(N)
*** Space complexity : 0(NLogN)


#include<iostream>
#include<vector>
#include<queue>
using namespace std;
bool dfs(vector<int> adj[],vector<int>&visited,int k,int x){
    
    for(int j=0;j<adj[k].size();j++){
      if(adj[k][j]!=x and visited[adj[k][j]]==1)
       return 1;
      visited[k]=1;
      if(adj[k][j]!=x)
       return dfs(adj,visited,adj[k][j],k);
    }
}

int main()
{
    int nodes=5;
    vector<int>visited(nodes,0);
    queue<int>q;
    vector<int>adj[nodes];
    vector<vector<int>>v={{1,4},{2,0},{3,1},{4,2},{0,3}};

    for(int i=0;i<v.size();i++)
       for(int j=0;j<v[i].size();j++)
        adj[i].push_back(v[i][j]);
 
    cout<<"adj list :"<<endl;
    for(int i=0;i<(sizeof(adj)/4)/(sizeof(adj[0])/4);i++){
      cout<<i<<"->";
      for(int j=0;j<adj[i].size();j++)
       cout<<adj[i][j]<<" ";
      cout<<endl;
    }
    int a=dfs(adj,visited,0,0);

    if(a==0)
      for(int i=0;i<visited.size();i++)
        if(visited[i]==0){
         a=dfs(adj,visited,i,0);
         if(a==1)
          break;
        }
    cout<<a;

}


