
*** min spaning tree ***
*** Time complexity : O(N)
*** Space complexity : 0(NLogN)



#include<iostream>
#include<vector>
#include<queue>
using namespace std; 
int main()
{ 
    int nodes=9,wieght=0;
    vector<int>visited(nodes,0),parent(nodes,-1);
    vector<pair<int,int>>adj[nodes];
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>mn;
    vector<vector<pair<int,int>>>v= {{{1,4},{7,8}},{{7,11},{2,8},{0,4}},{{1,8},{8,2},{3,7}},{{4,9},{2,7},{5,14}},{{3,9},{5,10}},{{3,14},{4,10},{6,2}},{{7,1},{8,6},{5,2}},{{0,8},{1,11},{8,7}},{{7,7},{2,2},{6,6}}};
    
    for(int i=0;i<v.size();i++)
      for(int j=0;j<v[i].size();j++)
       adj[i].push_back(v[i][j]);

    for(int i=0;i<v.size();i++){
      cout<<i<<"->";
      for(int j=0;j<v[i].size();j++)
       cout<<"("<<adj[i][j].first<<","<<adj[i][j].second<<") ";
      cout<<endl;
    }
       
    mn.push({0,0});
    cout<<"min span tree : ";
    while(!mn.empty()){
        int x=mn.top().first;
        int y=mn.top().second;
        mn.pop();   
       
        if(visited[y]==0){
            cout<<y<<" ";
            for(int i=0;i<adj[y].size();i++)
                if(visited[adj[y][i].first]==0)
                    mn.push({adj[y][i].second,adj[y][i].first});
         wieght=wieght+x;
        }
        visited[y]=1;
    }
    cout<<endl<<"wieght : "<<wieght;
}

