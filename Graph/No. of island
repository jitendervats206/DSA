
*** find no. of island ***
*** Time complexity : O(N)
*** Space complexity : 0(NLogN)


#include<iostream>
#include<vector>
#include<queue>
using namespace std;
void bfs(int &i,int &j,vector<vector<int>> &visited,vector<vector<int>> &mat){
    queue<pair<int,int>>q;
    q.push({i,j});  

    while(!q.empty()){
      int x=q.front().first;
      int y=q.front().second;
      visited[x][y]=1;
      q.pop();
  
      if((x-1)>-1 and mat[x-1][y]==1 and visited[x-1][y]==0)
       q.push({x-1,y});
      if((x+1)<mat.size() and mat[x+1][y]==1 and visited[x+1][y]==0)
       q.push({x+1,y});
      if((y+1)<mat[0].size() and mat[x][y+1]==1 and visited[x][y+1]==0)
       q.push({x,y+1});
      if((y-1)>-1 and mat[x][y-1]!=0 and visited[x][y-1]==0)
       q.push({x,y-1});
      
      if((x-1)>-1 and (y+1)<mat[0].size() and mat[x-1][y+1]!=0 and visited[x-1][y+1]==0)
       q.push({x-1,y+1});
      if((x-1)>-1 and (y-1)>-1 and mat[x-1][y-1]!=0 and visited[x-1][y-1]==0)
       q.push({x-1,y-1});
      if((x+1)<mat.size() and (y+1)<mat[0].size() and mat[x+1][y+1]!=0 and visited[x+1][y+1]==0)
       q.push({x+1,y+1});
      if((x+1)<mat.size() and (y-1)>-1 and mat[x+1][y-1]!=0 and visited[x+1][y-1]==0)
       q.push({x+1,y-1});
      
    }
}

int main()
{
  int island=0;
  vector<vector<int>>mat(4,vector<int>(4,0));
  vector<vector<int>>visited(4,vector<int>(4,0));
  queue<pair<int,int>>q;

  mat[0][0]=1; 
  mat[0][1]=1; 
  mat[0][2]=1; 
  mat[1][1]=1; 
  mat[3][0]=1; 
  mat[2][3]=1;
  mat[3][2]=1;  
  mat[3][3]=1;

  for(int i=0;i<mat.size();i++){
    for(int j=0;j<mat[i].size();j++){
     cout<<mat[i][j]<<" ";
     if(mat[i][j]==1)
      q.push({i,j});
    }
    cout<<endl;
  }

  while(!q.empty()){
    int x=q.front().first;
    int y=q.front().second;
    if(visited[x][y]==0){
     bfs(x,y,visited,mat);
     island++;
    }
    q.pop();
  }
  cout<<island;

}
