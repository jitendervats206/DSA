

*** To find Shortest path in directed wieghted graph***
*** Time complexity : O(N)
*** Space complexity : 0(NLogN)


#include<iostream>
#include<vector>
#include<queue>
#include<climits>
using namespace std;
int main()
{
    int nodes=8;
    vector<int>parent(nodes,0),path(nodes,INT_MAX);
    queue<pair<int,int>>q;
    vector<pair<int,int>>adj[nodes];
    vector<vector<pair<int,int>>>v= {   {{1,4},{2,3}} , {{3,6}} ,{{4,2}}, {{6,5}}, {{5,1}}, {{3,2}}, {{7,4}} ,{} };
                                  
    for(int i=0;i<v.size();i++)
       for(int j=0;j<v[i].size();j++)
        adj[i].push_back({v[i][j].first,v[i][j].second});
 
    cout<<"adj list :"<<endl;
    for(int i=0;i<(sizeof(adj)/4)/(sizeof(adj[0])/4);i++){
      cout<<i<<"->";
      for(int j=0;j<adj[i].size();j++)
       cout<<"("<<adj[i][j].first<<","<<adj[i][j].second<<") ";
      cout<<endl;
    }

    q.push({0,0});
    path[0]=0;
    while(!q.empty()){
      int x=q.front().first;
      int y=q.front().second;
      q.pop();
      path[x]=min(path[x],path[parent[x]]+y);
   
      for(int i=0;i<adj[x].size();i++){
        q.push({adj[x][i].first,adj[x][i].second});
        parent[adj[x][i].first]=x;
      }
    }

    cout<<"shortest path :";
    for(int i=0;i<path.size();i++)
     cout<<path[i]<<" ";

}
