
*** To shortest path in matrix ***
*** Time complexity : O(N)
*** Space complexity : 0(NLogN)


#include<iostream>
#include<vector>
#include<queue>
using namespace std;
int main()
{
  vector<vector<int>>mat(5,vector<int>(4,1));
  queue<pair<pair<int,int>,int>>q;

  mat[1][1]=0; 
  mat[0][3]=0; 
  mat[1][3]=0; 
  mat[2][1]=0; 
  mat[3][1]=0; 
  mat[3][2]=0;  
  mat[4][2]=2;

  for(int i=0;i<mat.size();i++){
    for(int j=0;j<mat[i].size();j++)
     cout<<mat[i][j]<<" ";
    cout<<endl;
  }

  q.push({{0,0},0});  
  while(!q.empty()){
    int x=q.front().first.first;
    int y=q.front().first.second;
    int z=q.front().second;
    q.pop();

    if(mat[x][y]==0){
     cout<<-1;
     break;
    }
    mat[x][y]=0;  
    if(x==4 and y==2){
      cout<<z;
      break;
    }

    if((x-1)>-1 and mat[x-1][y]!=0)
     q.push({{x-1,y},z+1});
    if((x+1)<mat.size() and mat[x+1][y]!=0)
     q.push({{x+1,y},z+1});
    if((y+1)<mat[0].size() and mat[x][y+1]!=0)
     q.push({{x,y+1},z+1});
    if((y-1)>-1 and mat[x][y-1]!=0)
     q.push({{x,y-1},z+1});
  }
  
}
