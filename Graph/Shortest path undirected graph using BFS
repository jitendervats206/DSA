

*** To find shortest path in undirected graph using BFS ***
*** Time complexity : O(N)
*** Space complexity : 0(NLogN)



#include<iostream>
#include<vector>
#include<queue>
using namespace std;
int main()
{
    int nodes=9;
    vector<int>visited(nodes,0),path(nodes,-1);
    queue<pair<int,int>>q;
    vector<int>adj[nodes];
    vector<vector<int>>v={{1,2},{0,5},{0,4,3},{4,2,7},{2,3,8},{1,6},{5,8},{3,8},{7,6}};

    for(int i=0;i<v.size();i++)
       for(int j=0;j<v[i].size();j++)
        adj[i].push_back(v[i][j]);
 
    cout<<"adj list :"<<endl;
    for(int i=0;i<(sizeof(adj)/4)/(sizeof(adj[0])/4);i++){
      cout<<i<<"->";
      for(int j=0;j<adj[i].size();j++)
       cout<<adj[i][j]<<" ";
      cout<<endl;
    }
    q.push({0,0});
    visited[0]=1;

    while(!q.empty()){
      int x=q.front().first;
      int y=q.front().second;
      q.pop();
      path[x]=path[y]+1;
      for(int i=0;i<adj[x].size();i++)
        if(visited[adj[x][i]]==0){
          q.push({adj[x][i],x});
          visited[adj[x][i]]=1;
        }
    }
    for(int i=0;i<path.size();i++) 
     cout<<path[i]<<" ";

}

