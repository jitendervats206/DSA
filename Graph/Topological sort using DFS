
*** To find topologcal sort using DFS ***
*** Time complexity : O(N)
*** Space complexity : 0(NLogN)


#include<iostream>
#include<vector>
#include<stack>
using namespace std;
void dfs(vector<int> adj[],vector<int>&visited,stack<int>&q,int k){
    visited[k]=1;
    
    for(int j=0;j<adj[k].size();j++)
     if(visited[adj[k][j]]!=1)
      dfs(adj,visited,q,adj[k][j]);
    q.push(k);
}

int main()
{
    int nodes=7;
    vector<int>visited(nodes,0);
    stack<int>q;
    vector<int>adj[nodes];
    vector<vector<int>>v={{1,2},{3,4},{},{4},{},{6,4},{3}};

    for(int i=0;i<v.size();i++)
       for(int j=0;j<v[i].size();j++)
        adj[i].push_back(v[i][j]);
 
    cout<<"adj list :"<<endl;
    for(int i=0;i<(sizeof(adj)/4)/(sizeof(adj[0])/4);i++){
      cout<<i<<"->";
      for(int j=0;j<adj[i].size();j++)
       cout<<adj[i][j]<<" ";
      cout<<endl;
    }

    dfs(adj,visited,q,0);

    for(int i=0;i<visited.size();i++)
        if(visited[i]==0)
         dfs(adj,visited,q,i);
        
    while(!q.empty()){
        cout<<q.top()<<" ";
        q.pop();
    }

}


