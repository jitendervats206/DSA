
*** To find No. of triangle in directed graph ***
*** Time complexity : O(N)
*** Space complexity : 0(NLogN)


#include<iostream>
#include<vector>
#include<stack>
using namespace std;
void dfs(int &count,stack<int>s,int time,int start,vector<int>&visited,vector<int> adj[]){
    if(s.top()==start and time!=0){
     count++;
     return;
    }

    if(time==3)
     return;

    for(int i=0;i<adj[s.top()].size();i++){
       if(visited[adj[s.top()][i]]==0){
        s.push(adj[s.top()][i]);
        dfs(count,s,time+1,start,visited,adj);
        time--;
        s.pop();
       }   
    }
}

int main()
{
    int nodes=4,count=0;
    stack<int>s;
    vector<int>visited(nodes,0);
    vector<int>adj[nodes];
    vector<vector<int>>v={{2},{0,3},{1},{2}};

    for(int i=0;i<v.size();i++)
       for(int j=0;j<v[i].size();j++)
        adj[i].push_back(v[i][j]);
 
    cout<<"adj list :"<<endl;
    for(int i=0;i<(sizeof(adj)/4)/(sizeof(adj[0])/4);i++){
      cout<<i<<"->";
      for(int j=0;j<adj[i].size();j++)
       cout<<adj[i][j]<<" ";
      cout<<endl;
    }

    for(int i=0;i<4;i++){
     s.push(i);
     dfs(count,s,0,i,visited,adj);
     visited[i]=1;
     cout<<count<<" ";
    }
}
