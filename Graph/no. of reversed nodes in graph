
*** To find no. reverse nodes ***
*** Time complexity : O(N)
*** Space complexity : 0(NLogN)



#include<iostream>
#include<vector>
#include<queue>
using namespace std;
int main()
{
    int nodes=7,dest=6;
    queue<pair<int,int>>q;
    vector<int>visited(nodes,0);
    vector<pair<int,int>>adj[nodes];
    vector<vector<int>>v={{0,1},{2,1},{2,3},{6,3},{6,4},{4,5},{5,1}};

    for(int i=0;i<v.size();i++){
      int a=v[i][0];
      int b=v[i][1];
      adj[a].push_back({b,0});
      adj[b].push_back({a,1});
     }
 
    cout<<"adj list :"<<endl;
    for(int i=0;i<(sizeof(adj)/4)/(sizeof(adj[0])/4);i++){
      cout<<i<<"->";
      for(int j=0;j<adj[i].size();j++)
       cout<<"("<<adj[i][j].first<<","<<adj[i][j].second<<") ";
      cout<<endl;
    }

    q.push({0,0});
    while(!q.empty()){
      int x=q.front().first;
      int y=q.front().second;
      q.pop();

      if(x==dest){
       cout<<y;
       break;
      }
      
      for(int i=0;i<adj[x].size();i++)
        q.push({adj[x][i].first,adj[x][i].second+1});

    }
}
