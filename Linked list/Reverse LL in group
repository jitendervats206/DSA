
*** To reverse LL in group ***
*** Time complexity : O(N)
*** Space complexity : 0(1)


#include<iostream>
using namespace std;
class node{
  public:
  int data;
  node *next;
};

void input(int x[],int y,node *&head){
  head=NULL;
  node *l=head; 
  for(int i=0;i<y;i++){
   node *temp=new node;
   temp->data=x[i];
   if(head==NULL)
    head=temp;
   else
    l->next=temp;
   l=temp;
   l->next=NULL;
  }
}

void reverse(node*&head){
  node *p=NULL;
  node *c=head;
  node *t=head;
  while(t){
   t=t->next;
   c->next=p;
   p=c;
   head=c;
   c=t;
  }
}

void output(node *head){
  node *h=head;
  while(h!=NULL){
   cout<<h->data<<"->";
   h=h->next;
  }
  cout<<endl;
}

int main()
{
   node *head,*h,*h1,*h2,*t=NULL;
   int k=5;
   int arr[]={1,2,3,4,5,6,7,8};
   input(arr,sizeof(arr)/4,head);
   output(head);
   h1=head;

   while(h1){
    for(int i=0;i<k-1 and h1->next;i++)
     h1=h1->next;
    h=h1;
    h1=h1->next;
    h->next=NULL;
    node*m=head;
    reverse(head);
    h2->next=head;
    if(t==NULL)
     t=head;
    h=head;
    for(int i=0;i<k-1 and h->next;i++)
     h=h->next;
    h2=h;
    h->next=h1;
    head=h1;
   }
   output(t);

}
