
*** reverse alternate nodes in group  ***
*** Time complexity : O(N)
*** Space complexity : 0(1)

#include<iostream>
using namespace std;
class node{
  public:
  int data;
  node *next;
};

void input(int x[],int y,node *&head){
  head=NULL;
  node *l=head;
  for(int i=0;i<y;i++){
   node *temp=new node;
   temp->data=x[i];
   if(head==NULL)
    head=temp;
   else
    l->next=temp;
   l=temp;
   l->next=NULL;
   
  }
}

void reverse(node *&head){
  node *p=NULL;
  node *c=head;
  node *t=head;
  while(t){
    t=t->next;
    c->next=p;
    p=c;
    c=t;
  }
  head=p;
}

void output(node *&head){
  node *h=head;
  while(h!=NULL){
    cout<<h->data<<"->";
    h=h->next;
  }
  cout<<endl;
}

int main()
{
    node *head,*h,*h1,*h2,*h3=NULL;
    int arr[]={1,2,3,4,5,6,7,9,8,9,10};
    int k=3;
    bool flag=true;
    input(arr,sizeof(arr)/4,head);
    output(head);
    h=head;
    h1=head;

  
     node*dummy=new node();
     dummy->data=-1;
     dummy->next=head;
     h=dummy;
 
     while(head)
     {
     if(flag==true){
       for(int i=0;i<k-1 and head->next;i++)
        head=head->next;
     
      h1=head->next;
       head->next=NULL;
       head=h->next;
       reverse(head);
       h->next=head;
       while(head->next)
        head=head->next;
       h=head;
       head->next=h1;
       head=head->next;
       flag=false;
      }
      else{
       flag=true;
       for(int i=0;i<k and h->next;i++)
        h=h->next;
       head=h->next;
     }
 
     }
     output(dummy->next);
}
