
*** diastance of 1 from neares 0 ***
*** Time complexity : O(N*N)
*** Space complexity : O(N)



#include<iostream>
#include<queue>
using namespace std;
int main()
{
   int arr[3][3]={0,1,0,  1,1,1,  1,1,1};
   int m=sizeof(arr)/4;
   int n=sizeof(arr[0])/4;
   vector<vector<int>>v(m/n,vector<int>(n,0));
   queue<pair<int,int>>q;


   for(int i=0;i<m/n;i++){
    for(int j=0;j<n;j++)
     cout<<arr[i][j]<<" ";
    cout<<endl;
   }
   
   for(int i=0;i<m/n;i++)
    for(int j=0;j<n;j++)
     if(arr[i][j]==0)
      q.push({i,j});

    while(!q.empty()){
      int i=q.front().first;
      int j=q.front().second;

      if(arr[i-1][j]==1 and v[i-1][j]==0 and (i-1)>=0){
       v[i-1][j]=v[i][j]+1;
       q.push({i-1,j});}

      if(arr[i+1][j]==1 and v[i+1][j]==0 and (i+1)<m/n){
       v[i+1][j]=v[i][j]+1;
       q.push({i+1,j});}

      if(arr[i][j-1]==1  and v[i][j-1]==0 and (j-1)>=0){
       v[i][j-1]=v[i][j]+1;
       q.push({i,j-1});} 

      if(arr[i][j+1]==1 and v[i][j+1]==0 and (j+1)<n){
       v[i][j+1]=v[i][j]+1;
       q.push({i,j+1});}
      q.pop();
   }

   cout<<endl<<endl;
   for(int i=0;i<m/n;i++){
    for(int j=0;j<n;j++)
      cout<<v[i][j]<<" ";
    cout<<endl;
   }

}

