
*** sort an stack using recursion ***
*** Time complexity : O(N)
*** Space complexity : O(1)


#include<iostream>
#include<stack>
using namespace std;
void sort(stack<int>&s,int x){
  if(s.empty() or s.top()>=x){
    s.push(x);
    return;
  }
  if(s.top()<x){
    int a=s.top();
    s.pop();
    sort(s,x);
    s.push(a);
  }
  return;
}

void reverse(stack<int>&s){
  if(s.empty())
    return;
  int a=s.top();
  s.pop();
  reverse(s);
  sort(s,a);
  return;
}

int main()
{
  stack<int>s;
  s.push(1);
  s.push(8);
  s.push(3);
  s.push(6);
  s.push(5);

  reverse(s);
  while(!s.empty()){
    cout<<s.top()<<endl;
    s.pop();
  }
    
}
