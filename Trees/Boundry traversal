
*** Boundry traversal ***
*** Time complexity : O(N)
*** Space complexity : 0(N)

#include<iostream>
#include<vector>
using namespace std;
class node{
  public:
  int data;
  node *left,*right;
};

node *input(){
    int x;
    cin>>x;
    if(x<0)
     return 0;

    node *temp=new node;
    temp->data=x;
    cout<<"enter "<<x<<" left node : ";
    temp->left=input();
    cout<<"enter "<<x<<" right node : ";
    temp->right=input();
    return temp;
}

void lef(node *root,vector<int>&v){
  if(root==NULL or (!root->left and !root->right))
   return;
  
  v.push_back(root->data);
  if(root->left)
   lef(root->left,v);
  else
   lef(root->right,v); 
}

void rgt(node *root,vector<int>&v){
  if(root==NULL or (!root->left and !root->right))
   return;
  
  if(root->right)
   rgt(root->right,v);
  else
   rgt(root->left,v); 
  v.push_back(root->data);
}

void leaf(node*root,vector<int>&v){
  if(root==NULL)
   return;

  if(!root->left and !root->right)
   v.push_back(root->data);
  leaf(root->left,v);
  leaf(root->right,v);
}

int main()
{ 
    node *root;
    cout<<"enter root node : ";
    root=input();
    vector<int>v;

    v.push_back(root->data);
    lef(root->left,v);
    leaf(root,v);
    rgt(root->right,v);
    cout<<"boundry traversal : ";
    for(int i=0;i<v.size();i++)
      cout<<v[i]<<" ";

}
