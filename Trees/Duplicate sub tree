
*** check sub tree is duplicate ***
*** Time complexity : O(N)
*** Space complexity : 0(N)


#include<iostream>
#include<unordered_map>
using namespace std;
class node{
  public:
  int data;
  node *left,*right;
};

node *input(){
    int x;
    cin>>x;
    if(x<0)
     return 0;

    node *temp=new node;
    temp->data=x;
    cout<<"enter "<<x<<" left node : ";
    temp->left=input();
    cout<<"enter "<<x<<" right node : ";
    temp->right=input();
    return temp;
}

void dup(node *root,unordered_map<int,node*>&m,bool &flag){
    if(root==NULL)
     return;
    
    if(m[root->data]==NULL)
     m[root->data]=root;
    else{
        if(root->left and m[root->data]->left)
         if(m[root->data]->left->data==root->left->data){
          flag=true;
          return;
        }
        else if(root->right and m[root->data]->right)
         if(m[root->data]->right->data==root->right->data){
          flag=true;
          return;
        }
    }
    dup(root->left,m,flag);
    dup(root->right,m,flag);
}

int main()
{ 
    node *root;
    bool flag=false;
    unordered_map<int,node*>m;
    cout<<"enter root node : ";
    root=input();
    dup(root,m,flag);
    cout<<flag;
}
