
*** Flatten tree ***
*** Time complexity : O(N)
*** Space complexity : 0(1)


#include<iostream>
using namespace std;
class node{
  public:
  int data;
  node *left,*right;
};

node *input(){
    int x;
    cin>>x;
    if(x<0)
     return 0;

    node *temp=new node;
    temp->data=x;
    cout<<"enter "<<x<<" left node : ";
    temp->left=input();
    cout<<"enter "<<x<<" right node : ";
    temp->right=input();
    return temp;
}

void flatten(node *&root){
    while(root){
     if(!root->left)
        root=root->right;
     else{
        node*temp=root->left;
        while(temp->right)
            temp=temp->right;
        temp->right=root->right;
        root->right=root->left;
        root->left=NULL;
        root=root->right;
     }
    }
}


int main()
{ 
    node *root;
    cout<<"enter root node : ";
    root=input();
    cout<<"flatten tree : ";
    node*r=root;
    flatten(r);
    while(root){
        cout<<root->data<<" ";
        root=root->right;
    }
}

