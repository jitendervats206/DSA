
*** To check the is any node aoverlap after tree folds***
*** Time complexity : O(N)
*** Space complexity : 0(1)


#include<iostream>
#include<queue>
using namespace std;
class node{
  public:
   int data;
   node *left,*right;  
   node(int val){
    data=val;
    left=right=NULL;
   }
};

void level(queue<node*>q){
    if(q.empty())
     return;

    cout<<q.front()->data<<" ";
    if(q.front()->left)
     q.push(q.front()->left);
    if(q.front()->right)
     q.push(q.front()->right);
    q.pop();
    level(q);
}

int check(node*root1,node*root2){
    if(root1==NULL and root2==NULL)
     return 1;
    if(root1==NULL or root2==NULL)
     return 0;
    int l=check(root1->left,root2->right);
    int r=check(root1->right,root2->left);

    if(l==1 and r==1)
     return 1;
    return 0;
}

int main()
{
    node *root;
    queue<node*>q;
    root=new node(1);     
    root->left=new node(2);
    root->left->right=new node(4);
    root->right=new node(3);
    root->right->left=new node(5);

    q.push(root);
    level(q);
    q.pop();
    cout<<endl;
    cout<<check(root,root);

}
