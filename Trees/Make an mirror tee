
*** To make an mirror tree***
*** Time complexity : O(N)
*** Space complexity : 0(1)


#include<iostream>
using namespace std;
class node{
   public:
   int data;
   node *left,*right;
};

void preorder(node *r1){
    if(r1==NULL)
     return;
    cout<<r1->data<<" ";
    preorder(r1->left);
    preorder(r1->right);
}

node *input(){
    int x;
    cin>>x;
    if(x<0)
     return 0;

    node *temp=new node;
    temp->data=x;
    cout<<"enter "<<x<<" left node : ";
    temp->left=input();
    cout<<"enter "<<x<<" right node : ";
    temp->right=input();
    return temp;
}

node *mirror(node* &root1){
    if(root1==NULL)
     return NULL;
    
    node* root2=new node;
    root2->data=root1->data;
    if(root1->left)
     root2->right=mirror(root1->left);
    else
     root2->right=NULL;
    
    if(root1->right)
     root2->left=mirror(root1->right);
    else
     root2->left=NULL;
    return root2;

}

int main()
{
    node *root1,*root2;
    cout<<"enter root node : ";
    root1=input();
    root2=mirror(root1);

    cout<<"preorder1 : ";
    preorder(root1);
    cout<<endl<<"preorder2 : ";
    preorder(root2);

}
