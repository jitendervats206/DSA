
*** find the max of all tree levels ***
*** Time complexity : O(N)
*** Space complexity : 0(N)



#include<iostream>
#include<queue>
using namespace std;
class node{
  public:
   int data;
   node *left,*right;
   node(int val){
    data=val;
    left=right=NULL;
   }
};

void level(queue<node*>q){
    if(q.empty())
     return;

    cout<<q.front()->data<<" ";
    if(q.front()->left)
     q.push(q.front()->left);
    if(q.front()->right)
     q.push(q.front()->right);
    q.pop();
    level(q);
}

node *input(){
    int x;
    cin>>x;
    if(x<0)
     return 0;

    node *temp=new node(x);
    cout<<"enter "<<x<<" left node : ";              
    temp->left=input();
    cout<<"enter "<<x<<" right node : ";
    temp->right=input();
    return temp;
}

int main()
{
    node *root;
    queue<node*>q;
    root=new node(1);   
    root->left=new node(2);
    root->left->left=new node(4);
    root->left->right=new node(5);
    root->left->right->left=new node(8);
    root->left->right->right=new node(9);
    root->right=new node(3);
    root->right->left=new node(6);
    root->right->right=new node(7);
    root->right->right->left=new node(10);
    root->right->right->right=new node(11);
    q.push(root);
    level(q);

    q.pop();
    q.push(root);
    int level=0,mx=-1;
    cout<<endl;
    while(!q.empty()){
        int n=q.size();
        mx=-1;
        while(n>0){
            if(q.front()->right)
             q.push(q.front()->right);
            if(q.front()->left)
             q.push(q.front()->left);
      
            n--;
            mx=max(mx,q.front()->data);
            q.pop();
           
        }
        cout<<mx<<" ";
        level++;
       
    }
  
}


