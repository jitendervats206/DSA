
*** find the maximum path sum in tree ***
*** Time complexity : O(N)
*** Space complexity : 0(1)


#include<iostream>
using namespace std;
class node{
  public:
  int data;
  node *left,*right;
};

class pack{
  public:
  int sum,path;
  pack(int x){
   sum=path=0;
  }
};

node *input(){
    int x;
    cin>>x;
    if(x<0)
     return 0;

    node *temp=new node;
    temp->data=x;
    cout<<"enter "<<x<<" left node : ";
    temp->left=input();
    cout<<"enter "<<x<<" right node : ";
    temp->right=input();
    return temp;
}

pack *sum(node *root){
    if(root==NULL)
      return new pack(0);

    pack*l=sum(root->left);
    pack*r=sum(root->right);

    if(!root->left and !root->right){
        l->path=1;
        l->sum=root->data;
        return l;
    }
    else{
        if(l->path>r->path){
         l->sum=l->sum+root->data;
         l->path++;
        }
        else if(l->path<r->path){
         l->sum=r->sum+root->data;
         l->path=r->path+1;
        }
        else{
            if(l->sum+root->data>r->sum+root->data)
             l->sum=l->sum+root->data;
            else 
             l->sum=r->sum+root->data;
            l->path=l->path+1;
        }
        return l;
    }
}

int main()
{ 
    node *root;
    int mxs=0,mxl=0,ms=0,ml=0;
    cout<<"enter root node : ";
    root=input();
    cout<<sum(root)->sum;
}
