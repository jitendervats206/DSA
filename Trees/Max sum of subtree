
*** find maximum sum of sub tree ***
*** Time complexity : O(N)
*** Space complexity : 0(1)


#include<iostream>
using namespace std;
class node{
  public:
  int data;
  node *left,*right;
};

node *input(){
    int x;
    cin>>x;
    if(x<-10)
     return 0;

    node *temp=new node;
    temp->data=x;
    cout<<"enter "<<x<<" left node : ";
    temp->left=input();
    cout<<"enter "<<x<<" right node : ";
    temp->right=input();
    return temp;
}

int sum(node*root,int &mx,int s){
    if(root==NULL)
     return 0;

    int a=sum(root->left,mx,s);
    int b=sum(root->right,mx,s);
    s=a+b+root->data;
    mx=max(mx,s);
    return s;
     
}

int main()
{ 
    node *root;
    int mx=0;
    cout<<"enter root node : ";
    root=input();
    sum(root,mx,0);
    cout<<mx;
}

