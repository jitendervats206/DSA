
*** find nodes at k distance from given node ***
*** Time complexity : O(N)
*** Space complexity : 0(N)


#include<iostream>
#include<bits/stdc++.h>
using namespace std;
class node{
  public:
   int data;
   node *left,*right;  
   node(int val){
    data=val;
    left=right=NULL;
   }
};

void level(queue<node*>q){
    if(q.empty())
     return;

    cout<<q.front()->data<<" ";
    if(q.front()->left)
     q.push(q.front()->left);
    if(q.front()->right)
     q.push(q.front()->right);
    q.pop();
    level(q);
}

void check(node*root,unordered_map<node*,node*>&m){
    if(root==NULL)
     return ;
    if(root->left){
        m[root->left]=root;
        check(root->left,m);
    }
    if(root->right){
        m[root->right]=root;
        check(root->right,m);
    }
}

int main()
{
    node *root;
    queue<node*>q;
    root=new node(5);     
    root->left=new node(8);
    root->left->left=new node(1);
    root->right=new node(2);
    root->right->right=new node(6);

    q.push(root);
    level(q);
    q.pop();
    cout<<endl;
    unordered_map<node*,node*>m;
    unordered_map<node*,int>m1;
    check(root,m);
    q.push(root->left);
    int level=0,k=2;

    while(!q.empty()){
        int n=q.size();

        while(n>0){
            n--;
            if(q.front()->left and m1[q.front()->left]==0)
             q.push(q.front()->left);
            if(q.front()->right and m1[q.front()->right]==0)
             q.push(q.front()->right);
            if(m[q.front()]!=0 and m1[m[q.front()]]==0)
             q.push(m[q.front()]);
            
            m1[q.front()]++;
            q.pop();
        }

        level++;
        if(level==k)
         break;
    }

    while(!q.empty()){
        cout<<q.front()->data<<" ";
        q.pop();
    }
    
}
