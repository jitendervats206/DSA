
*** print nodes having k leaves ***
*** Time complexity : O(N)
*** Space complexity : 0(1)



#include<iostream>
#include<queue>
#include<climits> 
using namespace std;
class node{
  public:
   int data;
   node *left,*right;  
   node(int val){
    data=val;
    left=right=NULL;
   }
};

void level(queue<node*>q){
    if(q.empty())
     return;

    cout<<q.front()->data<<" ";
    if(q.front()->left)
     q.push(q.front()->left);
    if(q.front()->right)
     q.push(q.front()->right);
    q.pop();
    level(q);
}

int anc(node*root,int k){
    if(root->left==NULL and root->right==NULL)
     return 1;

    if(root==NULL)
     return 0;

    int l=0,r=0;
    if(root->left)
     l=anc(root->left,k);
    if(root->right)
     r=anc(root->right,k);

    if(l+r==k)
        cout<<root->data<<" ";
    return l+r;
}

int main()
{ 
    node *root,*n1,*n2;
    int mx=INT_MIN;
    int mn=INT_MAX;
    root=new node(5);     
    root->left=new node(3);
    root->left->right=new node(0);
    root->right=new node(2);
    root->right->left=new node(6);
    root->right->right=new node(7);
    root->right->right->left=new node(1);
    root->right->left->left=new node(3);
 
    queue<node*>q;
    q.push(root);
    level(q);
    cout<<endl;
    anc(root,0);

}
