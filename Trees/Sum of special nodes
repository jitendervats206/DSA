
*** find the max sum of two leave nodes path***
*** Time complexity : O(N)
*** Space complexity : 0(N)


#include<iostream>
#include<bits/stdc++.h>
using namespace std;
class node{
  public:
   int data;
   node *left,*right;  
   node(int val){
    data=val;
    left=right=NULL;
   }
};

void level(queue<node*>q){
    if(q.empty())
     return;

    cout<<q.front()->data<<" ";
    if(q.front()->left)
     q.push(q.front()->left);
    if(q.front()->right)
     q.push(q.front()->right);
    q.pop();
    level(q);
}

int s(node*root,int&sum){
    if(root==NULL)
     return 0;
    if(!root->left and !root->right)
     return root->data;
    
    int l=s(root->left,sum);
    int r=s(root->right,sum);

    if(root->left and root->right){
     sum=max(sum,root->data+l+r);
     return max(root->data+l,root->data+r);
    }
    
    if(root->left)
     return root->data+l;
    
    if(root->right)
     return root->data+r;
    
}

int main()
{
    node *root;
    queue<node*>q;
    root=new node(-15);     
    root->left=new node(5);
    root->left->left=new node(-8);
    root->left->left->left=new node(2);
    root->left->right=new node(1);
    root->left->left->right=new node(-3);

    root->right=new node(6);
    root->right->right=new node(9);
    root->right->right->right=new node(0);
    root->right->right->right->right=new node(-1);
    root->right->left=new node(3);
    root->right->right->right->left=new node(4);
    root->right->right->right->right->left=new node(10);

    q.push(root);
    level(q);
    q.pop();
    cout<<endl;
    
    int sum=INT_MIN;
    s(root,sum);
    cout<<sum;
    
}

