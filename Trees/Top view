
*** to print the top view of tree***
*** Time complexity : O(N)
*** Space complexity : 0(N)


#include<iostream>
#include<queue>
#include<map>
using namespace std;
class node{
  public:
   int data;
   node *left,*right;
   node(int val){
    data=val;
    left=right=NULL;
   }
};

void level(queue<node*>q){
    if(q.empty())
     return;

    cout<<q.front()->data<<" ";
    if(q.front()->left)
     q.push(q.front()->left);
    if(q.front()->right)
     q.push(q.front()->right);
    q.pop();
    level(q);
}

node *input(){
    int x;
    cin>>x;
    if(x<0)
     return 0;

    node *temp=new node(x);
    cout<<"enter "<<x<<" left node : ";              
    temp->left=input();
    cout<<"enter "<<x<<" right node : ";
    temp->right=input();
    return temp;
}

int main()
{
    node *root;
    queue<node*>q;
    root=new node(1);     
    root->left=new node(2);
    root->left->left=new node(4);
    root->left->right=new node(5);
    root->left->left->right=new node(8);
    root->left->left->left=new node(7);
    root->left->left->right->left=new node(11);
    root->left->left->right->right=new node(12);
    root->right=new node(3);
    root->right->right=new node(6);
    root->right->right->left=new node(9);
    root->right->right->right=new node(10);
    root->right->right->right->left=new node(13);

    q.push(root);
    level(q);
    q.pop();
    cout<<endl;

    queue<pair<node*,int>>p;
    p.push({root,0});
    map<int,int>m;

    while(!p.empty()){

        if(m.find(p.front().second)==m.end())
         m[p.front().second]=p.front().first->data;
         
        if(p.front().first->left)
         p.push({p.front().first->left,p.front().second-1});
        if(p.front().first->right)
         p.push({p.front().first->right,p.front().second+1});

        p.pop();
           
    }
    
    vector<int>v;
    int k=0;
    for(auto i=m.begin();i!=m.end();i++)
        v.push_back((i->second));

    for(int i=0;i<v.size();i++){
        cout<<v[i]<<" ";
    }

}
