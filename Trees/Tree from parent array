
***  make tree from parent array***
*** Time complexity : O(N)
*** Space complexity : 0(N)



#include<iostream>
#include<unordered_map>
#include<queue>
using namespace std;
class node{
  public:
   int data;
   node *left,*right;  
   node(int val){
    data=val;
    left=right=NULL;
   }
};

void level(queue<node*>q){
  while(!q.empty()){
    int n=q.size();
    while(n>0){
        n--;
        if(q.front()->left)
         q.push(q.front()->left);
        if(q.front()->right) 
         q.push(q.front()->right);
        cout<<q.front()->data<<" ";
        q.pop();
    }
    cout<<endl;
  }
}

int main()
{                                                           
    int parent[]={1,13,31,7,17,33,27,1,5,15,19,3, 33,17, 19,21,23,25,31,11,29,13,27,7, 25,-1,23,15,3, 11,21,5, 9, 9};
    unordered_map<int,node*>m;
    queue<node*>q;
    node*root;

    for(int i=0;i<sizeof(parent)/4;i++)
        if(parent[i]==-1){
         root=new node(i);
         m[i]=root;
         break;
        }
    
    for(int i=0;i<sizeof(parent)/4;i++){
        if(parent[i]==-1)
         continue;
        m[i]=new node(i);
    }

    for(int i=0;i<sizeof(parent)/4;i++){
        if(parent[i]==-1)
         continue;
        if(m[parent[i]]->left==NULL)
         m[parent[i]]->left=m[i];
        else
         m[parent[i]]->right=m[i];
    }

    q.push(root);
    level(q);    
    
}
