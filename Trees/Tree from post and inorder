
*** make tree from posorder and inorder ***
*** Time complexity : O(N)
*** Space complexity : 0(N)


#include<iostream>
#include<vector>
#include<unordered_map>
#include<stack>
using namespace std;
class node{
   public:
   int data;
   node *left,*right;
};

node *input(){
    int x;
    cin>>x;
    if(x<0)
     return 0;

    node *temp=new node;
    temp->data=x;
    cout<<"enter "<<x<<" left node : ";
    temp->left=input();
    cout<<"enter "<<x<<" right node : ";
    temp->right=input();
    return temp;
}

node* tree2(vector<int>post,vector<int>in,int start,int end,int index){
    int mid;
    if(start>end)
     return 0;
    
    for(int i=start;i<=end;i++)
     if(in[i]==post[index])
      mid=i;
    
    node*r=new node;
    r->data=post[index];
    r->right=tree2(post,in,mid+1,end,index-1);
    r->left=tree2(post,in,start,mid-1,index-(end-mid)-1);
    return r;
}

int main()
{
    node *root1,*root2;
    int start=0,mid=0,end;   
    
    stack<node *>s;
    start=0;
    end=post.size()-1;
    vector<int>post={4,6,7,5,2,10,9,8,3,1};
    in={4,2,6,5,7,1,10,8,9,3};
    root2=tree2(post,in,start,end,end);
    s.push(root2);

    cout<<endl<<"postorder : ";
    unordered_map<node*,int>m;
    m[root2]=1;

    while(!s.empty()){
      if(s.top()->left and m[s.top()->left]!=1){
        m[s.top()->left]=1;
        s.push(s.top()->left);
      }
      else if(s.top()->right and m[s.top()->right]!=1){
        m[s.top()->right]=1;
        s.push(s.top()->right);
      }
      else{
        cout<<s.top()->data<<" ";
        s.pop();
      }  
    }
    m.clear();
    s.push(root1);
    cout<<endl<<"inorder : ";
    while(!s.empty()){
        if(s.top()->left and m[s.top()->left]!=1)
         s.push(s.top()->left);
        else if(m[s.top()]!=1){
         cout<<s.top()->data<<" ";
         m[s.top()]=1;
        }
        else if(s.top()->right and m[s.top()->right]!=1)
         s.push(s.top()->right);
        else 
         s.pop();
    }
}
