
*** make tree from preorder and inorder traversal ***
*** Time complexity : O(N)
*** Space complexity : 0(1)


#include<iostream>
#include<vector>
#include<unordered_map>
#include<stack>
using namespace std;
class node{
   public:
   int data;
   node *left,*right;
};

node *input(){
    int x;
    cin>>x;
    if(x<0)
     return 0;

    node *temp=new node;
    temp->data=x;
    cout<<"enter "<<x<<" left node : ";
    temp->left=input();
    cout<<"enter "<<x<<" right node : ";
    temp->right=input();
    return temp;
}

node* tree1(vector<int>pre,vector<int>in,int start,int end,int index){
    int mid;
    if(start>end)
     return 0;
    
    for(int i=start;i<=end;i++)
     if(in[i]==pre[index])
      mid=i;
    
    node*r=new node;
    r->data=pre[index];
    r->left=tree1(pre,in,start,mid-1,index+1);
    r->right=tree1(pre,in,mid+1,end,index+(mid-start)+1);
    return r;
}
int main()
{
    node *root1,*root2;
    int start=0,mid=0,end;    
    vector<int>pre={1,2,4,5,8,9,3,6,7,10};
    vector<int>in={4,2,8,5,9,1,6,3,7,10};
    end=pre.size()-1;
    root1=tree1(pre,in,start,end,0);
    
    stack<node *>s;
    s.push(root1);
    cout<<"preorder : ";
    while(!s.empty()){
      node *t=s.top();
      s.pop();
      cout<<t->data<<" ";
      if(t->right)
       s.push(t->right);
      if(t->left)
       s.push(t->left);
    } 
}
