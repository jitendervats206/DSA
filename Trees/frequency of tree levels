
*** check the frequency of 2 trees level order elements ***
*** Time complexity : O(N)
*** Space complexity : 0(N)


#include<iostream>
#include<bits/stdc++.h>
using namespace std;
class node{
  public:
   int data;
   node *left,*right;  
   node(int val){
    data=val;
    left=right=NULL;
   }
};

void level(queue<node*>q){
    if(q.empty())
     return;

    cout<<q.front()->data<<" ";
    if(q.front()->left)
     q.push(q.front()->left);
    if(q.front()->right)
     q.push(q.front()->right);
    q.pop();
    level(q);
}

int main()
{
    node *root1,*root2;
    queue<node*>q1,q2;
    root1=new node(5);     
    root1->left=new node(8);
    root1->left->left=new node(1);
    root1->right=new node(2);
    root1->right->right=new node(6);

    root2=new node(5);     
    root2->left=new node(2);
    root2->left->right=new node(1);
    root2->right=new node(8);
    root2->right->right=new node(6);

    q1.push(root1);
    level(q1);
    q1.pop();
    cout<<endl;
    q2.push(root2);
    level(q2);
    q2.pop();
    q1.push(root1);
    q2.push(root2);
    cout<<endl;

    while(q1.size()==q2.size()){
        int n1=q1.size();
        vector<int>v1,v2;
        if(q1.size()==0 and q2.size()==0)
         break;

        while(n1>0){
            n1--;
            if(q1.front()->left)
             q1.push(q1.front()->left);
            if(q1.front()->right) 
             q1.push(q1.front()->right);
            v1.push_back(q1.front()->data);
            q1.pop();

            if(q2.front()->left)
             q2.push(q2.front()->left);
            if(q2.front()->right) 
             q2.push(q2.front()->right);
            v2.push_back(q2.front()->data);
            q2.pop();

        }
        sort(v1.begin(),v1.end());
        sort(v2.begin(),v2.end());

        if(v1!=v2)
         cout<<0;
    }
    if(q1.size()!=q2.size())
      cout<<0;
    else 
     cout<<1;

}
