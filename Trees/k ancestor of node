
*** k ancestor of node ***
*** Time complexity : O(N)
*** Space complexity : 0(1)


#include<iostream>
#include<vector>
using namespace std;
class node{
  public:
  int data;
  node *left,*right;
};

node *input(){
    int x;
    cin>>x;
    if(x<0)
     return 0;

    node *temp=new node;
    temp->data=x;
    cout<<"enter "<<x<<" left node : ";
    temp->left=input();
    cout<<"enter "<<x<<" right node : ";
    temp->right=input();
    return temp;
}

int distance(node *root,int &d,int &target,node*&t){
    if(root==NULL) 
     return 0;

    if(root->data==target){
        return 1;
    }
    int a,b;
    a=distance(root->left,d,target,t);
    if(a==0)
     b=distance(root->right,d,target,t);
     
    if(a==1 or b==1){
        d--;
        if(d==0 and t->data==-1)
         t=root;
    }
    return a or b;
}

int main()
{ 
    node *root,*n1,*n2,*t;
    int d=3,target=12;
    cout<<"enter root node : ";
    root=input();
    t->data=-1;
    distance(root,d,target,t);
    cout<<t->data;
}

