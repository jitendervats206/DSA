
*** Reverse level order ***
*** Time complexity : O(N)
*** Space complexity : 0(N)


#include<iostream>
#include<vector>
#include<queue>
using namespace std;
class node{
  public:
  int data;
  node *left,*right;
};

node *input(){
    int x;
    cin>>x;
    if(x<0)
     return 0;

    node *temp=new node;
    temp->data=x;
    cout<<"enter "<<x<<" left node : ";
    temp->left=input();
    cout<<"enter "<<x<<" right node : ";
    temp->right=input();
    return temp;
}

void reverselevel(node *root,vector<int>&v,queue<node*>q){
   while(!q.empty()){
    v.push_back(q.front()->data);
    if(q.front()->right)
     q.push(q.front()->right);
    if(q.front()->left)
     q.push(q.front()->left);
    q.pop();
   }
 
}

int main()
{ 
    node *root;
    int x=0;
    cout<<"enter root node : ";
    root=input();
    queue<node*>q;
    vector<int>v;
    q.push(root);
    reverselevel(root,v,q);
    for(int i=v.size()-1;i>=0;i--)
     cout<<v[i]<<" ";
      
}
