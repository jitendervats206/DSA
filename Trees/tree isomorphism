
*** check for tree is isomorphism***
*** Time complexity : O(N)
*** Space complexity : 0(1)



#include<iostream>
#include<vector>
using namespace std;
class node{
  public:
  int data;
  node *left,*right;
};

node *input(){
    int x;
    cin>>x;
    if(x<0)
     return 0;

    node *temp=new node;
    temp->data=x;
    cout<<"enter "<<x<<" left node : ";
    temp->left=input();
    cout<<"enter "<<x<<" right node : ";
    temp->right=input();
    return temp;
}

bool isomorphism(node*root1,node*root2){
    if(!root1 and !root2)
     return true;
    if((root2 and !root1) or (!root2 and root1))
     return false;
    if(root1->data!=root2->data)
     return false;

    int a=(isomorphism(root1->left,root2->left) and isomorphism(root1->right,root2->right));
    int b=(isomorphism(root1->left,root2->right) and isomorphism(root1->right,root2->left));

    return a or b;
    
}

int main()
{ 
    node *root1,*root2;
    cout<<"enter root1 node : ";
    root1=input();
    cout<<"enter root2 node : ";
    root2=input();
    cout<<isomorphism(root1,root2);

}
