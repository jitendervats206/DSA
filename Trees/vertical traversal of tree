
*** vertical traversal ***
*** Time complexity : O(N)
*** Space complexity : 0(N)


#include<iostream>
#include<queue>
#include<map>
using namespace std;
class node{
  public:
   int data;
   node *left,*right;
   node(int val){
    data=val;
    left=right=NULL;
   }
};

void level(queue<node*>q){
    if(q.empty())
     return;

    cout<<q.front()->data<<" ";
    if(q.front()->left)
     q.push(q.front()->left);
    if(q.front()->right)
     q.push(q.front()->right);
    q.pop();
    level(q);
}

void find(node*root,int x,map<int,vector<int>>&m){
    if(root==NULL)
     return;
   
    m[x].push_back(root->data);
    find(root->left,x-1,m);
    find(root->right,x+1,m);
}

node *input(){
    int x;
    cin>>x;
    if(x<0)
     return 0;

    node *temp=new node(x);
    cout<<"enter "<<x<<" left node : ";              
    temp->left=input();
    cout<<"enter "<<x<<" right node : ";
    temp->right=input();
    return temp;
}

int main()
{
    node *root;
    queue<node*>q;
    root=new node(1);     
    root->left=new node(2);
    root->left->left=new node(4);
    root->left->right=new node(5);
    root->left->left->right=new node(8);
    root->left->left->left=new node(7);
    root->left->left->right->left=new node(11);
    root->left->left->right->right=new node(12);
    root->right=new node(3);
    root->right->right=new node(6);
    root->right->right->left=new node(9);
    root->right->right->right=new node(10);
    root->right->right->right->left=new node(13);

    q.push(root);
    level(q);
    q.pop();
    cout<<endl;

    map<int,vector<int>>m;
    find(root,0,m);

    vector<vector<int>>v(m.size());
    int k=0;
    for(auto i=m.begin();i!=m.end();i++){
        for(int j=0;j<i->second.size();j++)
         v[k].push_back((i->second)[j]);
        k++;
    }

    for(int i=0;i<v.size();i++){
        for(int j=0;j<v[i].size();j++)   
         cout<<v[i][j]<<" ";
    }

}
